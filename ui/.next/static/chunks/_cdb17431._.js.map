{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/namastex/workspace/am-agents-labs/ui/contexts/auth-context.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useState } from 'react'\n\ninterface SimpleUser {\n    id: string\n    email: string\n}\n\ninterface AuthContextType {\n    user: SimpleUser | null\n    session: { api_key: string } | null\n    loading: boolean\n    signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function useAuth() {\n    const context = useContext(AuthContext)\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider')\n    }\n    return context\n}\n\ninterface AuthProviderProps {\n    children: React.ReactNode\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n    // For now, we'll use a hardcoded user since we're using API key auth\n    const [user] = useState<SimpleUser>({\n        id: 'api-user-1',\n        email: 'api@namastex.ai'\n    })\n    const [session] = useState({ api_key: 'namastex888' })\n    const [loading] = useState(false)\n\n    const signOut = async () => {\n        // In a real app, you might clear local storage or redirect\n        window.location.href = '/'\n    }\n\n    const value = {\n        user,\n        session,\n        loading,\n        signOut,\n    }\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAgBA,MAAM,4BAAc,CAAA,GAAA,4RAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS;;IACZ,MAAM,UAAU,CAAA,GAAA,4RAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACvB,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;GANgB;AAYT,SAAS,aAAa,EAAE,QAAQ,EAAqB;;IACxD,qEAAqE;IACrE,MAAM,CAAC,KAAK,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAc;QAChC,IAAI;QACJ,OAAO;IACX;IACA,MAAM,CAAC,QAAQ,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,SAAS;IAAc;IACpD,MAAM,CAAC,QAAQ,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAE;IAE3B,MAAM,UAAU;QACZ,2DAA2D;QAC3D,OAAO,QAAQ,CAAC,IAAI,GAAG;IAC3B;IAEA,MAAM,QAAQ;QACV;QACA;QACA;QACA;IACJ;IAEA,qBAAO,4TAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAChD;IAtBgB;KAAA","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/namastex/workspace/am-agents-labs/ui/components/ui/sonner.tsx"],"sourcesContent":["\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,CAAA,GAAA,2RAAA,CAAA,WAAQ,AAAD;IAEpC,qBACE,4TAAC,2QAAA,CAAA,UAAM;QACL,OAAO;QACP,WAAU;QACV,OACE;YACE,eAAe;YACf,iBAAiB;YACjB,mBAAmB;QACrB;QAED,GAAG,KAAK;;;;;;AAGf;GAjBM;;QACyB,2RAAA,CAAA,WAAQ;;;KADjC","debugId":null}}]
}