diff --git a/automagik/api/controllers/agent_controller.py b/automagik/api/controllers/agent_controller.py
index 1234567..abcdef9 100644
--- a/automagik/api/controllers/agent_controller.py
+++ b/automagik/api/controllers/agent_controller.py
@@ -607,15 +607,28 @@ async def get_or_create_user(request: AgentRunRequest) -> Optional[uuid.UUID]:
         
     # If user_id not provided, check for existing session's user
     if request.session_name:
-        existing_session = await run_in_threadpool(get_session_by_name, request.session_name)
-        if existing_session and existing_session.user_id:
-            user_id = existing_session.user_id
-            logger.info(f"‚úÖ Found existing session '{request.session_name}' with user_id {user_id}")
-            # Get the user
-            user = await run_in_threadpool(get_user_by_id, user_id)
-            if user:
-                logger.info(f"‚úÖ Using existing user from session: {user_id}")
-                return user_id
+        # First try to find the session by exact name
+        sessions_result = await run_in_threadpool(list_sessions, filters={'name': request.session_name})
+        if sessions_result and len(sessions_result) > 0:
+            # Get the most recent session with this name
+            matching_sessions = [s for s in sessions_result if s.name == request.session_name]
+            if matching_sessions:
+                # Sort by created_at to get most recent
+                matching_sessions.sort(key=lambda s: s.created_at or datetime.min, reverse=True)
+                existing_session = matching_sessions[0]
+                
+                if existing_session and existing_session.user_id:
+                    user_id = existing_session.user_id
+                    logger.info(f"‚úÖ Found existing session '{request.session_name}' with user_id {user_id}")
+                    # Verify the user exists
+                    user = await run_in_threadpool(get_user_by_id, user_id)
+                    if user:
+                        logger.info(f"‚úÖ Using existing user from session: {user_id}")
+                        return user_id
+                    else:
+                        logger.warning(f"‚ö†Ô∏è Session has user_id {user_id} but user not found in database")
+            else:
+                logger.debug(f"No exact match found for session name '{request.session_name}'")
             
     # Create new user if none exists
     user_data = {
@@ -810,17 +823,29 @@ async def handle_agent_run(agent_name: str, request: AgentRunRequest) -> Dict[st
             
         # Ensure MessageHistory is properly initialized
         if session_id and not message_history:
-            logger.info(f"üîÑ Creating MessageHistory for session {session_id} with user_id {effective_user_id}")
             message_history = await run_in_threadpool(
                 lambda: MessageHistory(session_id=session_id, user_id=effective_user_id)
             )
+            logger.info(f"üîÑ Created MessageHistory for session {session_id} with user_id {effective_user_id}")
             
         # Pass MessageHistory to agent
         message_history_obj = message_history
         
         # Store current message before running agent
         if message_history:
-            await run_in_threadpool(message_history.add_user_message, request.message_content)
+            # Store message with proper user_id
+            stored = await run_in_threadpool(
+                message_history.add_user_message, 
+                request.message_content,
+                metadata={
+                    'user_id': str(effective_user_id) if effective_user_id else None,
+                    'session_name': request.session_name,
+                    'agent_name': agent_name
+                }
+            )
+            if stored:
+                logger.info(f"‚úÖ Stored user message with user_id {effective_user_id}")
+            
         
         # Run the agent with history
         response_content = await agent.run(
diff --git a/automagik/agents/models/automagik_agent.py b/automagik/agents/models/automagik_agent.py
index 2345678..7890abc 100644
--- a/automagik/agents/models/automagik_agent.py
+++ b/automagik/agents/models/automagik_agent.py
@@ -358,13 +358,26 @@ class AutomagikAgent(BaseAgent):
             # Look up messages from database
             message_limit = kwargs.get("message_limit", 20)  # Default to 20 messages
             
-            # Load existing messages from message history if available
+            # Load existing messages from message history if available 
             if message_history_obj:
-                loaded_messages = message_history_obj.get_formatted_pydantic_messages(limit=message_limit or 20)
-                if loaded_messages:
-                    logger.info(f"‚úÖ Loaded {len(loaded_messages)} messages from session history")
-                    # Add loaded messages to our messages list  
-                    messages = loaded_messages + messages
+                # Ensure we retrieve messages before running
+                try:
+                    logger.info(f"üîç Attempting to load session history for session {message_history_obj.session_id}, user {message_history_obj.user_id}")
+                    loaded_messages = message_history_obj.get_formatted_pydantic_messages(limit=message_limit or 20)
+                    if loaded_messages:
+                        logger.info(f"‚úÖ Loaded {len(loaded_messages)} messages from session history")
+                        # Prepend loaded messages (oldest first) to current messages
+                        messages = loaded_messages + messages
+                        logger.debug(f"Total messages after loading history: {len(messages)}")
+                    else:
+                        logger.warning(f"‚ö†Ô∏è No messages loaded from session history")
+                except Exception as e:
+                    logger.error(f"‚ùå Error loading session history: {e}")
+                    import traceback
+                    logger.error(traceback.format_exc())
+            else:
+                logger.debug("No message_history_obj provided, using only current messages")
+                
         else:
             logger.debug("Using provided messages list without loading from database")
             
diff --git a/automagik/memory/message_history.py b/automagik/memory/message_history.py
index 3456789..9abcdef 100644
--- a/automagik/memory/message_history.py
+++ b/automagik/memory/message_history.py
@@ -149,9 +149,21 @@ class MessageHistory:
         
         # Update PydanticAI run messages format
         for db_message in db_messages:
+            # Skip if no text content
+            if not db_message.text_content:
+                logger.debug(f"Skipping message {db_message.id} with no text content")
+                continue
+                
             # Map database role to PydanticAI role format
             pydantic_role = self._map_db_role_to_pydantic(db_message.role)
             
+            # Log the message being added
+            logger.debug(f"Adding message to history: role={pydantic_role}, "
+                        f"text_length={len(db_message.text_content)}, "
+                        f"created_at={db_message.created_at}")
+            
+            # Skip system messages for now as they're handled separately
+            if pydantic_role == 'system':
+                continue
             # Create message dict based on role
             if pydantic_role == 'user':
                 message = UserMessage(content=db_message.text_content)