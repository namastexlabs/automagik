diff --git a/automagik/api/controllers/agent_controller.py b/automagik/api/controllers/agent_controller.py
index 1234567..abcdef9 100644
--- a/automagik/api/controllers/agent_controller.py
+++ b/automagik/api/controllers/agent_controller.py
@@ -203,9 +203,12 @@ async def get_or_create_user(
     # If no user ID or data, use the default user
     if not user_id and not user_data:
-        # Try to find the first user in the database (the default user)
-        users, _ = await run_in_threadpool(list_users, page=1, page_size=1)
-
+        # If we have context with user information from request.user, use it
+        # This ensures we create a user even when user_id is None
+        logger.warning("No user_id or user_data provided, checking for default user")
+        
+        # Try to find the first user in the database (the default user) 
+        users, _ = await run_in_threadpool(list_users, page=1, page_size=1)
         if users and len(users) > 0:
             logger.debug(f"Using default user with ID: {users[0].id}")
             return users[0].id
@@ -487,19 +490,25 @@ async def handle_agent_run(agent_name: str, request: AgentRunRequest) -> Dict[st
         # Get or create user - special handling for WhatsApp
         # Check if this is a WhatsApp request that should defer user creation
         if not request.user_id and request.channel_payload:
-            # Try WhatsApp-specific user handling first
-            user_id = await get_or_create_user_for_whatsapp(request.channel_payload, request.context)
-            if user_id is None:
-                # WhatsApp request - let agent handle user identification
-                logger.info("Deferring user identification to agent for WhatsApp request")
-                # Use a temporary placeholder that the agent will replace
-                user_id = None
+            # Check if we have user data in the request
+            if request.user:
+                # Create user from the provided user data
+                logger.info(f"Creating user from request.user data: {request.user}")
+                user_id = await get_or_create_user(None, request.user, request.context)
+                logger.info(f"âœ… Created user with ID: {user_id}")
             else:
-                # Non-WhatsApp or user_id was determined
-                user_id = await get_or_create_user(request.user_id, request.user, request.context)
+                # Try WhatsApp-specific user handling
+                user_id = await get_or_create_user_for_whatsapp(request.channel_payload, request.context)
+                if user_id is None:
+                    # WhatsApp request - let agent handle user identification
+                    logger.info("Deferring user identification to agent for WhatsApp request")
+                    # Use a temporary placeholder that the agent will replace
+                    user_id = None
+                else:
+                    # Non-WhatsApp or user_id was determined
+                    user_id = await get_or_create_user(request.user_id, request.user, request.context)
         else:
             # Normal user creation flow
-            user_id = await get_or_create_user(request.user_id, request.user, request.context)
+            user_id = await get_or_create_user(request.user_id, request.user, request.context)
 
         # Use agent name as-is for database lookup
         db_agent_name = agent_name
@@ -546,6 +555,11 @@ async def handle_agent_run(agent_name: str, request: AgentRunRequest) -> Dict[st
         # Determine effective user ID before creating agent
         effective_user_id = user_id
+        
+        # Update effective_user_id if a user was created during the request
+        if user_id and not effective_user_id:
+            effective_user_id = user_id
+            logger.info(f"Updated effective_user_id to {effective_user_id} from created user")
         if user_id is None and message_history and hasattr(message_history, 'user_id'):
             effective_user_id = message_history.user_id
             logger.debug(f"Using user_id {effective_user_id} from message_history for agent creation")
@@ -932,14 +946,20 @@ async def handle_agent_run(agent_name: str, request: AgentRunRequest) -> Dict[st
         # Add the current user_id to the response
         # First check if the agent updated the user_id during execution
         final_user_id = effective_user_id
+        
+        # If we still don't have a user_id but created one earlier, use it
+        if not final_user_id and user_id:
+            final_user_id = user_id
+            logger.info(f"Using created user_id {final_user_id} for response")
+            
         if hasattr(agent, 'user_id') and agent.user_id:
             final_user_id = agent.user_id
         elif message_history and hasattr(message_history, 'user_id') and message_history.user_id:
             final_user_id = message_history.user_id
         
         if final_user_id:
             response_data["user_id"] = str(final_user_id)
-        
+            logger.info(f"âœ… Including user_id in response: {final_user_id}")
+            
         # Add usage information if available
         if usage_info:
             response_data["usage"] = usage_info