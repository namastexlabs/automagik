---
description: Daily development workflow, mode switching, and implementation patterns for automagik-agents
globs: src/**/*,tests/**/*,*.py,*.md
alwaysApply: false
---
# Development Workflow - Mode Switching Edition

## 🎯 Overview

**Related**: [agent_mission.md](mdc:.cursor/rules/00_agent_mission.md) - Core mission and responsibilities

Structured development workflow optimized for automagik-agents codebase. **Search memory first**, then follow patterns.

## 🧠 **Memory-First Development**

### **Before Starting ANY Task**
```bash
# Search for task-specific patterns and preferences
agent-memory_search_memory_nodes --query "task keywords" --entity "Procedure"
agent-memory_search_memory_nodes --query "preferences" --entity "Preference"
agent-memory_search_memory_facts --query "dependencies relationships"
```

**Git Integration:**
```python
# MANDATORY: Start work with Linear-first naming using MCP tools
# 1. Create Linear task FIRST, get NMSTX-XX ID
# 2. Create standardized branch name
git_create_branch(
    repo_path="/root/prod/am-agents-labs",
    branch_name="NMSTX-XX-feature-name",  # Branch from Linear issue ID
    base_branch="main"
)

# 3. Switch to new branch
git_checkout(
    repo_path="/root/prod/am-agents-labs",
    branch_name="NMSTX-XX-feature-name"
)

# 4. Work and commit with Linear ID references using MCP tools
git_add(repo_path="/root/prod/am-agents-labs", files=["src/file.py"])
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(NMSTX-XX): add tool registration logic"  # Always reference Linear ID
)

# 5. Push progress regularly (use terminal - MCP doesn't support push)
run_terminal_cmd("git push origin NMSTX-XX-feature-name")
```

## 🛠️ Development Modes

### **🔍 Discovery Mode** - Understanding & Planning
**When**: Starting new work, investigating issues, architecture decisions

**Memory Search Pattern**:
```bash
# Understand existing patterns
agent-memory_search_memory_nodes --query "code patterns implementation" --entity "Procedure"
agent-memory_search_memory_nodes --query "coding style" --entity "Preference"
```

**Process**:
1. **Analyze codebase** - Review existing similar implementations
2. **Check architecture** - Understand component relationships
3. **Review patterns** - Follow established conventions
4. **Plan approach** - Design before implementation

**Memory Search for Architecture**:
```bash
# Search for architectural patterns and decisions
agent-memory_search_memory_nodes --query "architecture design patterns" --entity "Procedure"  
agent-memory_search_memory_facts --query "component relationships dependencies"
```

### **🐛 Debug Mode** - Problem Solving
**When**: Fixing bugs, investigating failures, troubleshooting

**Memory Search Pattern**:
```bash
# Search for similar errors and solutions
agent-memory_search_memory_nodes --query "debug troubleshoot error" --entity "Procedure"
agent-memory_search_memory_facts --query "error caused by solution"
```

**Process**:
1. **Reproduce issue** - Create minimal test case
2. **Isolate problem** - Narrow down root cause
3. **Check patterns** - Search for similar issues in memory
4. **Test solution** - Verify fix works

### **🧪 Testing Mode** - Validation & Quality
**When**: Writing tests, validating functionality, ensuring quality

**Memory Search Pattern**:
```bash
# Search for testing patterns and requirements
agent-memory_search_memory_nodes --query "test patterns validation" --entity "Procedure"
agent-memory_search_memory_nodes --query "test requirements" --entity "Requirement"
```

**Process**:
1. **Plan test cases** - Cover happy path and edge cases
2. **Follow test patterns** - Use established test structure
3. **Validate thoroughly** - Run full test suite
4. **Document results** - Record test outcomes

### **🏗️ Implementation Mode** - Building Features
**When**: Developing new features, extending functionality

**Memory Search Pattern**:
```bash
# Search for implementation patterns
agent-memory_search_memory_nodes --query "agent development" --entity "Procedure"
```

**Agent Development Process**:
1. **Extend AutomagikAgent** - Never modify base classes
2. **Follow patterns** from existing agents in `src/agents/simple/`
3. **Register tools** - Use `tool_registry.register_default_tools()`
4. **Test integration** - Verify agent works end-to-end

**Git Workflow for Agent Development**:
```python
# 1. Initial scaffold commit using MCP tools
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/agents/simple/<agent_name>/"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(agent): scaffold new agent structure"
)

# 2. Implementation commit
git_add(
    repo_path="/root/prod/am-agents-labs", 
    files=["src/agents/simple/<agent_name>/agent.py"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(agent): implement core agent logic and prompts"
)

# 3. Tool registration commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/agents/simple/<agent_name>/tools.py"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(agent): register tools and enable auto-discovery"
)
```

**Store Pattern**:
```bash
# Store successful agent patterns
agent-memory_add_memory --name "Agent Pattern: [Name]" --episode_body "pattern details" --source "text"
git_add(repo_path="/root/prod/am-agents-labs", files=[".cursor/rules/"])
git_commit(repo_path="/root/prod/am-agents-labs", message="docs: document new agent pattern")
```

### **🔧 Tool Development Mode** - Building Integrations
**When**: Creating tools, external service integrations

**Memory Search Pattern**:
```bash
# Search for tool development patterns
agent-memory_search_memory_nodes --query "tool development integration" --entity "Procedure"
```

**Tool Development Process with Git**:
```python
# 1. Schema definition commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/tools/<service>/schema.py"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(tool): define input/output schemas"
)

# 2. Implementation commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/tools/<service>/tool.py"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(tool): implement core business logic"
)

# 3. Registration commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/tools/<service>/__init__.py"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(tool): register tool globally"
)

# 4. Testing commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["tests/tools/<service>/"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="test(tool): add unit and integration tests"
)
```

### **🌐 API Development Mode** - Endpoint Creation
**When**: Creating/extending FastAPI endpoints

**Memory Search Pattern**:
```bash
# Search for API security and authentication patterns
agent-memory_search_memory_nodes --query "API endpoint security" --entity "Requirement"
```

**API Development Process with Git**:
```python
# 1. Model definition commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/api/models/"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(api): define endpoint models"
)

# 2. Implementation commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["src/api/routes/"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="feat(api): implement endpoint logic"
)

# 3. Testing commit
git_add(
    repo_path="/root/prod/am-agents-labs",
    files=["tests/api/"]
)
git_commit(
    repo_path="/root/prod/am-agents-labs",
    message="test(api): add endpoint tests"
)
```

## 📂 Codebase Navigation

### **Core Components**
```bash
src/
├── agents/
│   ├── common/          # Shared agent utilities
│   └── simple/          # Agent implementations
│       ├── discord/     # Discord integration agent
│       ├── sofia/       # Sofia main agent
│       └── stan/        # Stan assistant agent
├── api/
│   ├── controllers/     # Business logic
│   └── routes/          # FastAPI route definitions
├── tools/
│   ├── discord/         # Discord tool implementations
│   ├── gmail/           # Gmail integration tools
│   ├── notion/          # Notion API tools
│   └── memory/          # Memory/knowledge graph tools
└── db/
    ├── migrations/      # Database schema changes
    └── repository/      # Data access layer
```

### **Testing Structure**
```bash
tests/
├── agents/              # Agent-specific tests
│   ├── simple/          # Simple agent tests
│   └── sofia/           # Sofia agent tests
├── api/                 # API endpoint tests
├── tools/               # Tool integration tests
├── integration/         # End-to-end tests
└── unit/                # Unit tests
```

### **Configuration Files**
```bash
├── .env                 # Environment variables
├── pyproject.toml       # Python project configuration
├── pytest.ini          # Test configuration
└── Makefile            # Build and run scripts
```

## 🎯 Quality Standards

### **Code Quality Checklist**
- [ ] **Follow patterns** from memory searches
- [ ] **Extend, don't modify** base classes
- [ ] **Use type hints** throughout
- [ ] **Handle errors** gracefully
- [ ] **Add tests** for new functionality
- [ ] **Document APIs** with clear examples
- [ ] **Respect preferences** found in memory
- [ ] **Use MCP git tools** for version control operations

### **Security Requirements**
- [ ] **API authentication** on all `/api/v1/` endpoints
- [ ] **Input validation** with Pydantic models
- [ ] **Error handling** without exposing internals
- [ ] **Environment variables** for secrets

### **Performance Standards**
- [ ] **Async operations** for I/O
- [ ] **Proper connection pooling** for databases
- [ ] **Caching** where appropriate
- [ ] **Resource cleanup** in finally blocks

## 🔄 Development Cycle

### **1. Research Phase** 🔍
```bash
# Search memory for established patterns
agent-memory_search_memory_nodes --query "implementation pattern" --entity "Procedure"
```

**Store Discoveries**:
```bash
agent-memory_add_memory \
  --name "Pattern Discovery: [Component]" \
  --episode_body "Discovered pattern for [component] implementation: [details]" \
  --source "text"

# Commit discovery using MCP tools
git_add(repo_path="/root/prod/am-agents-labs", files=["docs/patterns.md"])
git_commit(repo_path="/root/prod/am-agents-labs", message="feat: implement discovered pattern")
```

### **2. Implementation Phase** 🏗️
**Store Successful Patterns**:
```bash
agent-memory_add_memory \
  --name "Implementation Success: [Feature]" \
  --episode_body "Successfully implemented [feature] using [approach]. Key insights: [details]" \
  --source "text"
```

### **3. Testing Phase** 🧪
- **Unit tests** for individual functions
- **Integration tests** for API endpoints
- **End-to-end tests** for user workflows

### **4. Documentation Phase** 📝
- **Code comments** for complex logic
- **API documentation** with examples
- **Pattern documentation** in memory

## 📊 Development Statistics & Goals

### **Daily Goals**
- **Memory searches**: 5+ before starting work
- **Patterns stored**: 2+ successful implementations
- **Tests written**: 100% coverage for new code
- **Documentation**: All public APIs documented

### **Weekly Review**
- **Pattern consistency**: Are we following established patterns?
- **Memory utilization**: Are we storing and reusing knowledge?
- **Code quality**: Are standards being maintained?
- **Test coverage**: Are critical paths tested?

## 🔀 Git Commit Practices

**Use MCP Tools for Version Control** - See [08_git_version_management.md](mdc:.cursor/rules/08_git_version_management.md)

### **Semantic Commit Format**
```python
# Examples using MCP tools
git_commit(repo_path="/root/prod/am-agents-labs", message="feat(agent): add Discord integration")
git_commit(repo_path="/root/prod/am-agents-labs", message="fix(memory): handle empty search results")
git_commit(repo_path="/root/prod/am-agents-labs", message="docs: update setup instructions")
git_commit(repo_path="/root/prod/am-agents-labs", message="test(api): add auth middleware tests")
```

### **Incremental Development Workflow**
```python
# Check current status first
git_status(repo_path="/root/prod/am-agents-labs")

# Create feature branch
git_create_branch(
    repo_path="/root/prod/am-agents-labs",
    branch_name="NMSTX-XX-feature-description",
    base_branch="main"
)

# Switch to feature branch
git_checkout(
    repo_path="/root/prod/am-agents-labs",
    branch_name="NMSTX-XX-feature-description"
)

# Make incremental commits as work progresses
# Each commit should be atomic and well-described
```

## 🚀 Quick Development Scripts

### **Agent Development**
```bash
# Create new agent structure (store as procedure in memory)
mkdir -p src/agents/simple/my_agent
touch src/agents/simple/my_agent/{__init__.py,agent.py,prompts.py}
```

### **Tool Development** 
```bash
# Create new tool structure
mkdir -p src/tools/my_tool
touch src/tools/my_tool/{__init__.py,tool.py}
```

### **Test Development**
```bash
# Create test structure
mkdir -p tests/agents/my_agent
touch tests/agents/my_agent/{__init__.py,test_agent.py}
```

### **API Development**
```bash
# Create API structure
mkdir -p src/api/routes/my_route
touch src/api/routes/my_route/{__init__.py,routes.py}
```

## 🐛 Common Development Issues

### **Import Issues**
```bash
# Verify virtual environment
which python  # Should show .venv/bin/python
source .venv/bin/activate

# Check dependencies
uv sync
```

### **Database Connection Issues**
```bash
# Check PostgreSQL status
sudo systemctl status postgresql
echo $DATABASE_URL
```

### **Agent Loading Issues**
```bash
# Test agent import
python -c "from src.agents.simple.my_agent.agent import MyAgent"
```

### **Debugging Script Organization**
- **Development scripts**: Always put in `dev/` folder
- **Temporary scripts**: Use `dev/temp/` (auto-deleted after 30 days)
- **Production utilities**: Only reviewed scripts go in `scripts/`

**Example debugging scripts**:
```bash
# ✅ DO: Put in dev/ folder
dev/debug_mcp_connection_issue.py
dev/test_agent_memory_integration.py
dev/temp_api_check.py
```

## 🚨 **CRITICAL: Linear-First Branch Naming** 

### **Mandatory Workflow** ✅ **REQUIRED**
```python
# NEVER start development without Linear task
# 1. Create Linear task FIRST → Get NMSTX-XX
# 2. Create branch using MCP tools
git_create_branch(
    repo_path="/root/prod/am-agents-labs",
    branch_name="NMSTX-XX-description",
    base_branch="main"
)

# 3. Work with Linear ID in ALL commits
# 4. Push using terminal (MCP doesn't support push)
run_terminal_cmd("git push origin NMSTX-XX-description")
```

### **Branch Name Standards** 🚨 **ENFORCED**
- ✅ **REQUIRED**: `NMSTX-XX-brief-description`
- ❌ **FORBIDDEN**: Descriptive names without Linear ID
- ❌ **FORBIDDEN**: Starting work before creating Linear task
- ❌ **FORBIDDEN**: Pushing non-standard branch names

### **Standardization Enforcement**
```python
# If you have non-standard branch name, use terminal to rename:
run_terminal_cmd("git branch -m old-name NMSTX-XX-corrected-name")
run_terminal_cmd("git push origin NMSTX-XX-corrected-name")
run_terminal_cmd("git push origin --delete old-name")  # Clean up

# Before any remote push, verify naming:
run_terminal_cmd("git branch --show-current")  # Must start with NMSTX-XX
```

---

**Remember**: Always search memory first for patterns and preferences. Store successful implementations for future reuse. Follow established patterns and extend rather than modify base classes. Use the knowledge graph as your source of truth for procedures and preferences. **Use MCP git tools** for local operations, terminal for push/pull.
